defmodule Library.Repo.Migrations.AddArchivedAtOnFeedbackReview do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:feedback_reviews) do
      add :archived_at, :utc_datetime_usec
    end

    drop_if_exists unique_index(:feedback_reviews, [:id], name: "feedback_reviews_id_index"),
      mode: :cascade

    drop_if_exists unique_index(:feedback_reviews, [:book_id, :author_id],
                     name: "feedback_reviews_unique_index"
                   )

    create unique_index(:feedback_reviews, [:id],
             where: "((archived_at IS NULL))",
             name: "feedback_reviews_id_index"
           )

    create unique_index(:feedback_reviews, [:book_id, :author_id],
             where: "((archived_at IS NULL))",
             name: "feedback_reviews_unique_index"
           )
  end

  def down do
    drop_if_exists unique_index(:feedback_reviews, [:book_id, :author_id],
                     name: "feedback_reviews_unique_index"
                   )

    drop_if_exists unique_index(:feedback_reviews, [:id], name: "feedback_reviews_id_index"),
      mode: :cascade

    create unique_index(:feedback_reviews, [:book_id, :author_id],
             name: "feedback_reviews_unique_index"
           )

    create unique_index(:feedback_reviews, [:id], name: "feedback_reviews_id_index")

    alter table(:feedback_reviews) do
      remove :archived_at
    end
  end
end
